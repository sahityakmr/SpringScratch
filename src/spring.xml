<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->

    <bean id="simpleTriangle" class="com.example.SimpleTriangle"/>

    <bean id="typedTriangle" class="com.example.TypedTriangle">

        <!--
        Using Setters
        <property name="type" value="Isoscales"/>
        <property name="height" value="20"/>
        -->

        <!--
        Using String Constructor
        <constructor-arg value="Isoscales"/>
        -->

        <!--
        This will also use string constructor
        <constructor-arg value="20"/>
        -->

        <!--
        Constructor Invoked. But, may cause issues in case of multiple fields with same type
        <constructor-arg value="Isoscales" type="java.lang.String"/>
        <constructor-arg value="20" type="int"/>
        -->

        <!--Perfect way-->
        <constructor-arg index="0" value="Equilateral"/>
        <constructor-arg index="1" value="20"/>

    </bean>

    <!--

    Note :
    Autowire by type will work using setters only when there is one bean of required type.
    Autowire by constructor works same as autowire by type, but using constructor injection.
    Autowire is off by default.


    Using Autowire by name
    <bean id="pointerTriangle" class="com.example.PointerTriangle" autowire="byName"/>

    <alias name="pointZero" alias="pointA"/>
    -->

    <!--Following bean will be created at every getBean call-->
    <bean id="pointerTriangle" class="com.example.PointerTriangle" scope="prototype">
        <!--
        Injecting Beans
        <property name="pointA" ref="pointZero"/>
        <property name="pointB" ref="pointB"/>
        <property name="pointC" ref="pointC"/>
        -->

        <!--Inner Beans-->
        <property name="pointA" ref="pointZero"/>
        <property name="pointB">
            <bean class="com.example.Point">
                <property name="x" value="51"/>
                <property name="y" value="11"/>
            </bean>
        </property>
        <property name="pointC">
            <bean class="com.example.Point">
                <property name="x" value="6"/>
                <property name="y" value="15"/>
            </bean>
        </property>

    </bean>

    <bean id="pointerTriangle1" class="com.example.PointerTriangle" parent="pointerTriangle">
        <!--Will initialize pointA and pointC from parent-->
        <property name="pointB" ref="pointC"/>
    </bean>

    <bean id="pointerTriangle2" class="com.example.PointerTriangle" parent="pointerTriangle">
        <!--Will initialize pointA from parent-->
        <property name="pointB" ref="pointC"/>
        <property name="pointC" ref="pointB"/>
    </bean>

    <alias name="pointerTriangle" alias="triangle"/>

    <bean id="pointZero" class="com.example.Point">
        <property name="x" value="0"/>
        <property name="y" value="0"/>
    </bean>

    <bean id="pointB" class="com.example.Point">
        <property name="x" value="-20"/>
        <property name="y" value="16"/>
    </bean>

    <bean id="pointC" class="com.example.Point">
        <property name="x" value="10"/>
        <property name="y" value="11"/>
    </bean>

    <!--
    To make parent bean abstract
    <bean id="complexTriangle" class="com.example.ComplexTriangle" abstract="true">
    -->
    <bean id="complexTriangle" class="com.example.ComplexTriangle" name="triangle2">
        <property name="points">
            <list>
                <ref bean="pointZero"/>
                <ref bean="pointC"/>
                <ref bean="pointB"/>
            </list>
        </property>

        <property name="types">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
                <entry key="key3" value="value3"/>

                <!--
                For Object Value
                <entry key="key1" value-ref="value1"/>
                <entry key="key2" value-ref="value2"/>
                <entry key="key3" value-ref="value3"/>
                -->
            </map>
        </property>
    </bean>

    <bean id="complexTriangle1" class="com.example.ComplexTriangle">
        <property name="points">
            <list merge="true">
                <ref bean="pointZero"/>
            </list>
        </property>
    </bean>


</beans>